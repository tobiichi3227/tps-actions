name: TPS verify

on:
  workflow_call:
    inputs:
      problems:
        default: ''
        type: string
      runs-on:
        default: 'ubuntu-latest'
        required: false
        type: string

jobs:
  pre-verify:
    runs-on: ${{ inputs.runs-on }}
    container:
      image: tobiichi3227/tps-github-runner
      options: --user root
    timeout-minutes: 3
    outputs:
      problems: ${{ steps.run-problems.outputs.problemsjson }}
    steps:
      - uses: actions/checkout@v3

      - name: Allow Git to access workspace
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Get changes
        if: github.event_name == 'push'
        id: changes
        uses: tobiichi3227/tps-actions/.github/actions/get-changes@main

      - name: Check push
        if: github.event_name == 'push'
        env:
          CHANGES: ${{ steps.changes.outputs.changes }}
        run: |
          echo "$CHANGES"
          echo "REQUEST=${{ fromJson(steps.changes.outputs.changes).verify }}" >> $GITHUB_ENV

      - name: Check dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "REQUEST=${{ inputs.problems }}" >> $GITHUB_ENV

      - name: Filter problems
        id: run-problems
        uses: TNFSH-Programming-Contest/tps-actions/.github/actions/run-problems@main
        with:
          requests: ${{ env.REQUEST }}

  verify:
    needs: [pre-verify]
    if: needs.pre-verify.outputs.problems != '[]'
    runs-on: ${{ inputs.runs-on }}
    container:
      image: tobiichi3227/tps-github-runner
      options: --user root
    timeout-minutes: 3
    strategy:
      matrix:
        problem: ${{ fromJson(needs.pre-verify.outputs.problems) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Allow Git to access workspace
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Verify
        working-directory: p${{ matrix.problem }}
        shell: bash
        run: |
          tps verify > verify-result.txt
          msg="$(cat verify-result.txt)"
          msg="${msg//$'\n'/'%0A'}"
          if grep -q "ERROR:" verify-result.txt; then
            echo "::error title=p${{ matrix.problem }}::$msg"
            exit 1
          elif grep -q "WARNING:" verify-result.txt; then
            echo "::warning title=p${{ matrix.problem }}::$msg"
          else
            echo "::notice title=p${{ matrix.problem }}::$msg"
          fi
